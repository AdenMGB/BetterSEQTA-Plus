// vite.config.ts
import { defineConfig } from "file:///Users/sethburkart/Documents/Coding/betterseqta-plus/node_modules/vite/dist/node/index.js";
import { join, resolve } from "path";

// lib/patchPackage.ts
import path from "node:path";
import fs from "fs";
import "file:///Users/sethburkart/Documents/Coding/betterseqta-plus/node_modules/vite/dist/node/index.js";
import "file:///Users/sethburkart/Documents/Coding/betterseqta-plus/node_modules/@crxjs/vite-plugin/dist/index.mjs";
var manifestPath = path.resolve("dist/chrome/manifest.json");
function updateManifestPlugin() {
  return {
    name: "update-manifest-plugin",
    enforce: "post",
    closeBundle() {
      forceDisableUseDynamicUrl();
    },
    configureServer(server) {
      server.httpServer?.once("listening", () => {
        const updated = forceDisableUseDynamicUrl();
        if (updated) {
          server.ws.send({ type: "full-reload" });
          console.log("** updated **");
        }
        fs.watchFile(manifestPath, () => {
          console.log("** watchFile ** ");
          const manifestContents = JSON.parse(fs.readFileSync(manifestPath, "utf8"));
          if (manifestContents.web_accessible_resources.some((resource) => resource.use_dynamic_url)) {
            const updated2 = forceDisableUseDynamicUrl();
            if (updated2) {
              server.ws.send({ type: "full-reload" });
              console.log("** updated **");
            }
          }
        });
      });
    },
    writeBundle() {
      console.log("### writeBundle ##");
      forceDisableUseDynamicUrl();
    }
  };
}
function forceDisableUseDynamicUrl() {
  if (!fs.existsSync(manifestPath)) {
    return false;
  }
  const manifestContents = JSON.parse(fs.readFileSync(manifestPath, "utf8"));
  if (typeof manifestContents === "function" || !manifestContents.web_accessible_resources) return false;
  if (manifestContents.web_accessible_resources.every((resource) => !resource.use_dynamic_url)) return false;
  manifestContents.web_accessible_resources.forEach((resource) => {
    if (resource.use_dynamic_url) resource.use_dynamic_url = false;
  });
  fs.writeFileSync(manifestPath, JSON.stringify(manifestContents, null, 2));
  return true;
}

// lib/base64loader.ts
import fs2 from "fs";
import mime from "file:///Users/sethburkart/Documents/Coding/betterseqta-plus/node_modules/mime-types/index.js";
var base64Loader = {
  name: "base64-loader",
  transform(_, id) {
    const [filePath, query] = id.split("?");
    if (query !== "base64") return null;
    const data = fs2.readFileSync(filePath, { encoding: "base64" });
    const mimeType = mime.lookup(filePath);
    const dataURL = `data:${mimeType};base64,${data}`;
    return `export default '${dataURL}';`;
  }
};

// vite.config.ts
import react from "file:///Users/sethburkart/Documents/Coding/betterseqta-plus/node_modules/@vitejs/plugin-react/dist/index.mjs";
import million from "file:///Users/sethburkart/Documents/Coding/betterseqta-plus/node_modules/million/dist/packages/compiler.mjs";
import { svelte } from "file:///Users/sethburkart/Documents/Coding/betterseqta-plus/node_modules/@sveltejs/vite-plugin-svelte/src/index.js";

// lib/createManifest.ts
function createManifest(manifest, browser) {
  return {
    manifest,
    browser
  };
}

// src/manifests/manifest.json
var manifest_default = {
  manifest_version: 3,
  name: "BetterSEQTA+",
  version: "3.4.0",
  description: "Enhance SEQTA Learn's usability and aesthetics! A fork of BetterSEQTA to continue development add add heaps more features!",
  icons: {
    "32": "resources/icons/icon-32.png",
    "48": "resources/icons/icon-48.png",
    "64": "resources/icons/icon-64.png"
  },
  action: {
    browser_style: true,
    default_popup: "interface/index.html#settings",
    default_icon: {
      "32": "resources/icons/icon-32.png",
      "48": "resources/icons/icon-48.png",
      "64": "resources/icons/icon-64.png"
    }
  },
  permissions: ["tabs", "notifications", "storage"],
  host_permissions: ["https://newsapi.org/", "*://*/*"],
  background: {
    service_worker: "background.ts"
  },
  content_security_policy: {
    extension_pages: "script-src 'self'; object-src 'self'"
  },
  content_scripts: [
    {
      matches: ["*://*/*"],
      js: ["SEQTA.ts"],
      run_at: "document_start"
    }
  ],
  web_accessible_resources: [
    {
      resources: ["*://*/*"],
      matches: ["*://*/*"]
    },
    {
      resources: ["resources/icons/*"],
      matches: ["*://*/*"]
    }
  ]
};

// src/manifests/chrome.ts
var chrome = createManifest(manifest_default, "chrome");

// src/manifests/brave.ts
var brave = createManifest(manifest_default, "brave");

// src/manifests/edge.ts
var edge = createManifest(manifest_default, "edge");

// package.json
var package_default = {
  name: "betterseqtaplus",
  version: "3.4.0",
  type: "module",
  description: "Enhance SEQTA Learn's usability and aesthetics! A fork of BetterSEQTA to continue development, while incorporating a plethora of new and improved features!",
  browserslist: "> 0.5%, last 2 versions, not dead",
  scripts: {
    dev: "cross-env MODE=chrome vite dev",
    "dev:firefox": "cross-env MODE=firefox vite build --watch",
    build: "cross-env MODE=chrome vite build && cross-env MODE=firefox vite build",
    "build:chrome": "cross-env MODE=chrome vite build",
    "build:firefox": "cross-env MODE=firefox vite build",
    "build:safari": "cross-env MODE=safari vite build",
    "convert:safari": "xcrun safari-web-extension-converter dist/safari --project-location . --app-name $npm_package_name-safari",
    release: "gh release create $npm_package_name@$npm_package_version ./dist/*.zip --generate-notes",
    publish: "bun lib/publish.js --b",
    zip: "bedframe zip"
  },
  targets: {
    prod: {
      sourceMap: {
        inline: false
      }
    }
  },
  keywords: [],
  author: {
    name: "SethBurkart123",
    email: "betterseqta@betterseqta.com",
    url: "https://github.com/BetterSEQTA/BetterSEQTA-plus"
  },
  license: "MIT",
  devDependencies: {
    "@crxjs/vite-plugin": "2.0.0-beta.25",
    "@types/mime-types": "^2.1.4",
    "@vitejs/plugin-react-swc": "^3.7.0",
    "cross-env": "^7.0.3",
    eslint: "^8.57.0",
    glob: "^11.0.0",
    "mime-types": "^2.1.35",
    prettier: "^3.3.3",
    process: "^0.11.10",
    sass: "^1.78.0",
    "sass-loader": "^13.3.3",
    semver: "^7.6.3",
    url: "^0.11.4"
  },
  dependencies: {
    "@bedframe/cli": "^0.0.85",
    "@codemirror/lang-css": "^6.3.0",
    "@codemirror/lang-less": "^6.0.2",
    "@codemirror/theme-one-dark": "^6.1.2",
    "@sveltejs/vite-plugin-svelte": "^4.0.0",
    "@tailwindcss/forms": "^0.5.9",
    "@tsconfig/svelte": "^5.0.4",
    "@types/chrome": "^0.0.270",
    "@types/color": "^3.0.6",
    "@types/dompurify": "^3.0.5",
    "@types/lodash": "^4.17.7",
    "@types/node": "^20.16.5",
    "@types/react": "17",
    "@types/react-dom": "17",
    "@types/sortablejs": "^1.15.8",
    "@types/uuid": "^9.0.8",
    "@types/webextension-polyfill": "^0.10.7",
    "@uiw/codemirror-extensions-color": "^4.23.3",
    "@uiw/codemirror-theme-github": "^4.23.3",
    "@vitejs/plugin-react": "^4.3.1",
    autoprefixer: "^10.4.20",
    classnames: "^2.5.1",
    codemirror: "^6.0.1",
    color: "^4.2.3",
    dompurify: "^3.1.6",
    "embla-carousel-autoplay": "^8.3.1",
    "embla-carousel-svelte": "^8.3.1",
    "fuse.js": "^7.0.0",
    idb: "^8.0.0",
    kolorist: "^1.8.0",
    localforage: "^1.10.0",
    lodash: "^4.17.21",
    million: "^3.1.11",
    motion: "^10.18.0",
    postcss: "^8.4.45",
    "publish-browser-extension": "^2.2.1",
    react: "17",
    "react-best-gradient-color-picker": "^3.0.10",
    "react-dom": "17",
    sortablejs: "^1.15.3",
    svelte: "^5.1.9",
    tailwindcss: "^3.4.11",
    typescript: "^5.6.2",
    uuid: "^9.0.1",
    vite: "^5.4.4",
    "webextension-polyfill": "^0.10.0"
  }
};

// src/manifests/firefox.ts
var updatedFirefoxManifest = {
  ...manifest_default,
  background: {
    scripts: [manifest_default.background.service_worker]
  },
  action: {
    "default_popup": "interface/index.html#settings"
  },
  browser_specific_settings: {
    gecko: {
      id: package_default.author.email
    }
  }
};
var firefox = createManifest(updatedFirefoxManifest, "firefox");

// src/manifests/opera.ts
var opera = createManifest(manifest_default, "opera");

// src/manifests/safari.ts
var updatedSafariManifest = {
  ...manifest_default,
  browser_specific_settings: {
    safari: {
      strict_min_version: "15.4",
      strict_max_version: "*"
    }
    // ^^^ https://developer.apple.com/documentation/safariservices/safari_web_extensions/optimizing_your_web_extension_for_safari#3743239
    //     https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/browser_specific_settings#safari_properties
  }
};
var safari = createManifest(updatedSafariManifest, "safari");

// vite.config.ts
import { crx } from "file:///Users/sethburkart/Documents/Coding/betterseqta-plus/node_modules/@crxjs/vite-plugin/dist/index.mjs";
var __vite_injected_original_dirname = "/Users/sethburkart/Documents/Coding/betterseqta-plus";
var targets = [
  chrome,
  brave,
  edge,
  firefox,
  opera,
  safari
];
var mode = process.env.MODE || "chrome";
var vite_config_default = defineConfig({
  plugins: [
    base64Loader,
    react(),
    svelte({
      emitCss: false
    }),
    million.vite({ auto: true }),
    //MillionLint.vite(), /* enable for testing and debugging performance */
    crx({
      manifest: targets.find((t) => t.browser === mode.toLowerCase())?.manifest ?? chrome.manifest,
      browser: mode.toLowerCase() === "firefox" ? "firefox" : "chrome"
    }),
    updateManifestPlugin()
  ],
  root: resolve(__vite_injected_original_dirname, "./src"),
  resolve: {
    alias: {
      "@": resolve(__vite_injected_original_dirname, "./src")
    }
  },
  server: {
    port: 5173,
    hmr: {
      host: "localhost",
      protocol: "ws",
      port: 5173
    }
  },
  build: {
    outDir: resolve(__vite_injected_original_dirname, "dist", mode),
    emptyOutDir: false,
    minify: false,
    rollupOptions: {
      input: {
        settings: join(__vite_injected_original_dirname, "src", "interface", "index.html"),
        migration: join(__vite_injected_original_dirname, "src", "seqta", "utils", "migration", "migrate.html")
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
